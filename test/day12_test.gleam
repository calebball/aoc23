import gleam/list
import gleeunit/should
import day12
import utils.{PartOne, PartTwo}

pub fn count_row_arrangements_test() {
  [
    #("???.###", [1, 1, 3]),
    #(".??..??...?##.", [1, 1, 3]),
    #("?#?#?#?#?#?#?#?", [1, 3, 1, 6]),
    #("????.#...#...", [4, 1, 1]),
    #("????.######..#####.", [1, 6, 5]),
    #("?###????????", [3, 2, 1]),
    #("????????..?????#?#??", [3, 5]),
    #("?????#?#?????..?????", [8, 1, 2]),
    #("?.??????.??#", [1, 2, 1, 1]),
  ]
  |> list.map(fn(p) {
    let #(row, groups) = p
    day12.count_row_arrangements(row, groups)
  })
  |> should.equal([1, 4, 1, 1, 4, 10, 21, 59, 18])
}

pub fn solve_part_1_test() {
  day12.solve(
    "???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1",
    PartOne,
  )
  |> should.equal(Ok(21))
}

pub fn solve_part_2_test() {
  day12.solve(
    "???.### 1,1,3
.??..??...?##. 1,1,3
?#?#?#?#?#?#?#? 1,3,1,6
????.#...#... 4,1,1
????.######..#####. 1,6,5
?###???????? 3,2,1",
    PartTwo,
  )
  |> should.equal(Ok(525_152))
}
